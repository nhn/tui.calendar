name: Publish calendar
description: Publish @toast-ui/calendar except wrappers.
on: [workflow_dispatch]
env:
  WORKING_DIRECTORY: ./apps/calendar
jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
        with:       # for alpha release
          ref: next # for alpha release
      - name: Check the package version
        id: cpv
        uses: PostHog/check-package-version@v2
        with:
          path: ${{ env.WORKING_DIRECTORY }}
      - name: Log when unchanged
        if: steps.cpv.outputs.is-new-version == 'false'
        run: 'echo "No version change"'
      - name: Cancel workflow
        if: steps.cpv.outputs.is-new-version == 'false'
        uses: andymckay/cancel-action@0.2
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/workflows/test.yml
  publish-npm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:       # for alpha release
          ref: next # for alpha release
      - name: Install dependencies
        uses: ./.github/composite-actions/install-dependencies
      - name: Build calendar
        run: |
          npm run build:calendar
      - name: Check package version
        id: cpv
        uses: PostHog/check-package-version@v2
        with:
          path: ${{ env.WORKING_DIRECTORY }}
      - name: Create new version tag
        run: |
          git tag v${{ steps.cpv.outputs.committed-version }}
      - name: Push new version tag
        run: |
          git push origin v${{ steps.tgv.outputs.target-version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish the package to npm (Calendar)
        run: |
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  # publish-cdn:
  #   needs: publish-package
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout branch
  #       uses: actions/checkout@v3
  #     - uses: ./.github/actions/install-dependencies
  #     - name: Upload files to CDN
  #       run: |
  #         npm run publish:cdn
  #       env:
  #         TOAST_CLOUD_TENENTID: ${{ secrets.TOAST_CLOUD_TENENTID }}
  #         TOAST_CLOUD_STORAGEID: ${{ secrets.TOAST_CLOUD_STORAGEID }}
  #         TOAST_CLOUD_USERNAME: ${{ secrets.TOAST_CLOUD_USERNAME }}
  #         TOAST_CLOUD_PASSWORD: ${{ secrets.TOAST_CLOUD_PASSWORD }}
  # publish-docs